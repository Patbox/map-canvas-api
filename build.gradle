plugins {
	id 'fabric-loom' version '1.7.+'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url "https://jitpack.io" }
	maven { url "https://maven.nucleoid.xyz"}
	mavenCentral()
}

sourceSets {
	testmod {
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.compileClasspath
	}
}

loom {
	runs {
		testmodClient {
			client()
			ideConfigGenerated project.rootProject == project
			name = "Test Mod Client"
			source sourceSets.testmod
		}
		testmodServer {
			server()
			ideConfigGenerated project.rootProject == project
			name = "Test Mod Server"
			source sourceSets.testmod
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompileOnly modLocalRuntime("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")


	//modRuntime "com.github.SuperCoder7979:databreaker:0.2.6"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	modCompileOnly modLocalRuntime("eu.pb4:polymer-common:0.10.0+1.21.2")
	modCompileOnly modLocalRuntime("eu.pb4:placeholder-api:2.5.0+1.21.2")
	modCompileOnly modLocalRuntime("org.openjdk.jol:jol-core:0.10")


	modCompileOnly modLocalRuntime('org.seleniumhq.selenium:selenium-java:4.3.0') {
		exclude group: 'io.netty', module: 'netty-transport-native-epoll'
		exclude group: 'io.netty', module: 'netty-transport-native-kqueue'
	}

	testmodImplementation sourceSets.main.output
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"


	it.options.release = 21

}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

def env = System.getenv()

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		repositories {
			if (env.MAVEN_URL) {
				maven {
					credentials {
						username env.MAVEN_USERNAME
						password env.MAVEN_PASSWORD
					}
					url env.MAVEN_URL
				}
			} else {
				mavenLocal()
			}
		}
	}
}

task testmodJar(type: Jar) {
	from sourceSets.testmod.output
	destinationDirectory = new File(project.buildDir, "devlibs")
	archiveClassifier = "testmod"
}

task remapTestmodJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: testmodJar) {
	input = testmodJar.archiveFile
	archiveClassifier = "testmod"
	addNestedDependencies = false
}
build.dependsOn remapTestmodJar
